import {
  cytoscape
} from "./chunk-ZCDDVCR3.js";
import {
  require_prop_types
} from "./chunk-KMN5OX7C.js";
import {
  require_react
} from "./chunk-HSUUC2QV.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/react-cytoscapejs/dist/react-cytoscape.modern.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var { string: o, array: l, object: s, number: a, bool: i, oneOfType: r, any: c, func: u } = import_prop_types.default;
var d = { id: o, className: o, style: r([o, s]), elements: r([l, c]), stylesheet: r([l, c]), layout: r([s, c]), pan: r([s, c]), zoom: a, panningEnabled: i, userPanningEnabled: i, minZoom: a, maxZoom: a, zoomingEnabled: i, userZoomingEnabled: i, boxSelectionEnabled: i, autoungrabify: i, autolock: i, autounselectify: i, get: u, toJson: u, diff: u, forEach: u, cy: u, headless: i, styleEnabled: i, hideEdgesOnViewport: i, textureOnViewport: i, motionBlur: i, motionBlurOpacity: a, wheelSensitivity: a, pixelRatio: r([o, s]) };
var p = (e2, t2) => {
  if (((e3, t3) => null == e3 || null == t3)(e2, t2) && (null != e2 || null != t2)) return true;
  if (e2 === t2) return false;
  if ("object" != typeof e2 || "object" != typeof t2) return e2 !== t2;
  const n = Object.keys(e2), o2 = Object.keys(t2), l2 = (n2) => e2[n2] !== t2[n2];
  return n.length !== o2.length || !(!n.some(l2) && !o2.some(l2));
};
var m = (e2, t2) => null != e2 ? e2[t2] : null;
var y = { diff: p, get: m, toJson: (e2) => e2, forEach: (e2, t2) => e2.forEach(t2), elements: [{ data: { id: "a", label: "Example node A" } }, { data: { id: "b", label: "Example node B" } }, { data: { id: "e", source: "a", target: "b" } }], stylesheet: [{ selector: "node", style: { label: "data(label)" } }], zoom: 1, pan: { x: 0, y: 0 } };
var h = (e2, t2, n, o2) => n(m(e2, o2), m(t2, o2));
var b = (e2, t2, n, o2, l2, s2, a2) => {
  e2.batch(() => {
    (o2 === p || h(t2, n, o2, "elements")) && x(e2, m(t2, "elements"), m(n, "elements"), l2, s2, a2, o2), h(t2, n, o2, "stylesheet") && E(e2, m(t2, "stylesheet"), m(n, "stylesheet"), l2), ["zoom", "minZoom", "maxZoom", "zoomingEnabled", "userZoomingEnabled", "pan", "panningEnabled", "userPanningEnabled", "boxSelectionEnabled", "autoungrabify", "autolock", "autounselectify"].forEach((s3) => {
      h(t2, n, o2, s3) && f(e2, s3, m(t2, s3), m(n, s3), l2);
    });
  }), h(t2, n, o2, "layout") && g(e2, m(t2, "layout"), m(n, "layout"), l2);
};
var f = (e2, t2, n, o2, l2) => {
  e2[t2](l2(o2));
};
var g = (e2, t2, n, o2) => {
  const l2 = o2(n);
  null != l2 && e2.layout(l2).run();
};
var E = (e2, t2, n, o2) => {
  const l2 = e2.style();
  null != l2 && l2.fromJson(o2(n)).update();
};
var x = (e2, t2, n, o2, l2, s2, a2) => {
  const i2 = [], r2 = e2.collection(), c2 = [], u2 = {}, d2 = {}, p2 = (e3) => l2(l2(e3, "data"), "id");
  s2(n, (e3) => {
    const t3 = p2(e3);
    d2[t3] = e3;
  }), null != t2 && s2(t2, (t3) => {
    const n2 = p2(t3);
    u2[n2] = t3, ((e3) => null != d2[e3])(n2) || r2.merge(e2.getElementById(n2));
  }), s2(n, (e3) => {
    const t3 = p2(e3), n2 = ((e4) => u2[e4])(t3);
    ((e4) => null != u2[e4])(t3) ? c2.push({ ele1: n2, ele2: e3 }) : i2.push(o2(e3));
  }), r2.length > 0 && e2.remove(r2), i2.length > 0 && e2.add(i2), c2.forEach(({ ele1: t3, ele2: n2 }) => O(e2, t3, n2, o2, l2, a2));
};
var O = (e2, t2, n, o2, l2, s2) => {
  const a2 = l2(l2(n, "data"), "id"), i2 = e2.getElementById(a2), r2 = {};
  ["data", "position", "selected", "selectable", "locked", "grabbable", "classes"].forEach((e3) => {
    const a3 = l2(n, e3);
    s2(a3, l2(t2, e3)) && (r2[e3] = o2(a3));
  });
  const c2 = l2(n, "scratch");
  s2(c2, l2(t2, "scratch")) && i2.scratch(o2(c2)), Object.keys(r2).length > 0 && i2.json(r2);
};
var w = class extends import_react.default.Component {
  static get propTypes() {
    return d;
  }
  static get defaultProps() {
    return y;
  }
  static normalizeElements(e2) {
    if (null != e2.length) return e2;
    {
      let { nodes: t2, edges: n } = e2;
      return null == t2 && (t2 = []), null == n && (n = []), t2.concat(n);
    }
  }
  constructor(t2) {
    super(t2), this.displayName = "CytoscapeComponent", this.containerRef = import_react.default.createRef();
  }
  componentDidMount() {
    const e2 = this.containerRef.current, { global: t2, headless: o2, styleEnabled: l2, hideEdgesOnViewport: s2, textureOnViewport: a2, motionBlur: i2, motionBlurOpacity: r2, wheelSensitivity: c2, pixelRatio: u2 } = this.props, d2 = this._cy = new cytoscape({ container: e2, headless: o2, styleEnabled: l2, hideEdgesOnViewport: s2, textureOnViewport: a2, motionBlur: i2, motionBlurOpacity: r2, wheelSensitivity: c2, pixelRatio: u2 });
    t2 && (window[t2] = d2), this.updateCytoscape(null, this.props);
  }
  updateCytoscape(e2, t2) {
    const n = this._cy, { diff: o2, toJson: l2, get: s2, forEach: a2 } = t2;
    b(n, e2, t2, o2, l2, s2, a2), null != t2.cy && t2.cy(n);
  }
  componentDidUpdate(e2) {
    this.updateCytoscape(e2, this.props);
  }
  componentWillUnmount() {
    this._cy.destroy();
  }
  render() {
    const { id: t2, className: n, style: o2 } = this.props;
    return import_react.default.createElement("div", { ref: this.containerRef, id: t2, className: n, style: o2 });
  }
};
export {
  w as default
};
//# sourceMappingURL=react-cytoscapejs.js.map
