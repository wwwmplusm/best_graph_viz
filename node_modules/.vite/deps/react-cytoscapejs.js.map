{
  "version": 3,
  "sources": ["../../react-cytoscapejs/src/types.js", "../../react-cytoscapejs/src/diff.js", "../../react-cytoscapejs/src/json.js", "../../react-cytoscapejs/src/defaults.js", "../../react-cytoscapejs/src/patch.js", "../../react-cytoscapejs/src/component.js"],
  "sourcesContent": ["import PropTypes from 'prop-types';\n\nconst { string, array, object, number, bool, oneOfType, any, func } = PropTypes;\n\nexport const types = {\n  /**\n   * The `id` HTML attribute of the component.\n   * */\n  id: string,\n\n  /**\n   * The `class` HTML attribute of the component.  Use this to set the dimensions of\n   * the graph visualisation via a style block in your CSS file.\n   */\n  className: string,\n\n  /**\n   * The `style` HTML attribute of the component.  Use this to set the dimensions of\n   * the graph visualisation if you do not use separate CSS files.\n   */\n  style: oneOfType([string, object]),\n\n  /**\n   * The flat list of Cytoscape elements to be included in the graph, each represented\n   * as non-stringified JSON.  E.g.:\n   *\n   * ```\n   * elements: [\n   *   { data: { id: 'one', label: 'Node 1' }, position: { x: 0, y: 0 } },\n   *   { data: { id: 'two', label: 'Node 2' }, position: { x: 100, y: 0 } },\n   *   { data: { source: 'one', target: 'two', label: 'Edge from Node1 to Node2' } }\n   * ]\n   * ```\n   *\n   * See http://js.cytoscape.org/#notation/elements-json\n   * */\n  elements: oneOfType([array, any]),\n\n  /**\n   * The Cytoscape stylesheet as non-stringified JSON.  E.g.:\n   *\n   * ```\n   * stylesheet: [\n   *   {\n   *      selector: 'node',\n   *      style: {\n   *        'width': 30,\n   *        'height': 30,\n   *        'shape': 'rectangle'\n   *      }\n   *   }\n   * ]\n   * ```\n   *\n   * See http://js.cytoscape.org/#style\n   */\n  stylesheet: oneOfType([array, any]),\n\n  /**\n   * Use a layout to automatically position the nodes in the graph.  E.g.\n   *\n   * ```\n   * layout: { name: 'random' }\n   * ```\n   *\n   * N.b. to use an external layout extension, you must register the extension\n   * prior to rendering this component, e.g.:\n   *\n   * ```\n   * import Cytoscape from 'cytoscape';\n   * import COSEBilkent from 'cytoscape-cose-bilkent';\n   * import React from 'react';\n   * import CytoscapeComponent from 'cytoscape-reactjs';\n   *\n   * Cytoscape.use(COSEBilkent);\n   *\n   * class MyApp extends React.Component {\n   *   render() {\n   *     const elements = [\n   *       { data: { id: 'one', label: 'Node 1' }, position: { x: 0, y: 0 } },\n   *       { data: { id: 'two', label: 'Node 2' }, position: { x: 100, y: 0 } },\n   *       { data: { source: 'one', target: 'two', label: 'Edge from Node1 to Node2' } }\n   *     ];\n   *\n   *     const layout = { name: 'cose-bilkent' };\n   *\n   *     return <CytoscapeComponent elements={elements} layout={layout}>;\n   *   }\n   * }\n   * ```\n   *\n   * See http://js.cytoscape.org/#layouts\n   */\n  layout: oneOfType([object, any]),\n\n  /**\n   * The panning position of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/pan\n   */\n  pan: oneOfType([object, any]),\n\n  /**\n   * The zoom level of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/zoom\n   */\n  zoom: number,\n\n  /**\n   * Whether the panning position of the graph is mutable overall.\n   *\n   * See http://js.cytoscape.org/#init-opts/panningEnabled\n   */\n  panningEnabled: bool,\n\n  /**\n   * Whether the panning position of the graph is mutable by user gestures (e.g. swipe).\n   *\n   * See http://js.cytoscape.org/#init-opts/userPanningEnabled\n   */\n  userPanningEnabled: bool,\n\n  /**\n   * The minimum zoom level of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/minZoom\n   */\n  minZoom: number,\n\n  /**\n   * The maximum zoom level of the graph.\n   *\n   * See http://js.cytoscape.org/#init-opts/maxZoom\n   */\n  maxZoom: number,\n\n  /**\n   * Whether the zoom level of the graph is mutable overall.\n   *\n   * See http://js.cytoscape.org/#init-opts/zoomingEnabled\n   */\n  zoomingEnabled: bool,\n\n  /**\n   * Whether the zoom level of the graph is mutable by user gestures (e.g. pinch-to-zoom).\n   *\n   * See http://js.cytoscape.org/#init-opts/userZoomingEnabled\n   */\n  userZoomingEnabled: bool,\n\n  /**\n   * Whether shift+click-and-drag box selection is enabled.\n   *\n   * See http://js.cytoscape.org/#init-opts/boxSelectionEnabled\n   */\n  boxSelectionEnabled: bool,\n\n  /**\n   * If true, nodes automatically can not be grabbed regardless of whether\n   * each node is marked as grabbable.\n   *\n   * See http://js.cytoscape.org/#init-opts/autoungrabify\n   */\n  autoungrabify: bool,\n\n  /**\n   * If true, nodes can not be moved at all.\n   *\n   * See http://js.cytoscape.org/#init-opts/autolock\n   */\n  autolock: bool,\n\n  /**\n   * If true, elements have immutable selection state.\n   *\n   * See http://js.cytoscape.org/#init-opts/autounselectify\n   */\n  autounselectify: bool,\n\n  /**\n   * `get(object, key)`\n   * Get the value of the specified `object` at the `key`, which may be an integer\n   * in the case of lists/arrays or strings in the case of maps/objects.\n   */\n  get: func,\n\n  /**\n   * `toJson(object)`\n   * Get the deep value of the specified `object` as non-stringified JSON.\n   */\n  toJson: func,\n\n  /**\n   * diff(objectA, objectB)\n   * Return whether the two objects have equal value. This is used to determine if\n   * and where Cytoscape needs to be patched.\n   */\n  diff: func,\n\n  /**\n   * forEach(list, iterator)\n   * Call `iterator` on each element in the `list`, in order.\n   */\n  forEach: func,\n\n  /**\n   * cy(cyRef)\n   * The `cy` prop allows for getting a reference to the `cy` Cytoscape object, e.g.:\n   *\n   * `<CytoscapeComponent cy={cy => (myCyRef = cy)} />`\n   */\n  cy: func,\n\n  /**\n   * headless\n   * The `headless` proper allows for setting whether the Cytoscape instance is headless, i.e.\n   * not rendered.  This value can not be changed after initialisation of the component.\n   */\n  headless: bool,\n\n  /**\n   * styleEnabled\n   * The `styleEnabled` flag is used to enable style functionality in a headless instance (i.e.\n   * `headless: true, styleEnabled: true`).  For a rendered instance, do not set this value.\n   */\n  styleEnabled: bool,\n\n  /**\n   * hideEdgesOnViewport\n   * A rendering hint that specifies, for renderers which support the hint, whether edges should\n   * be hidden during zoom and pan operations.\n   */\n  hideEdgesOnViewport: bool,\n\n  /**\n   * textureOnViewport\n   * A rendering hint that specifies, for renderers which support the hint, whether a preview\n   * based on the existing scene should be used in place of building a new scene.\n   */\n  textureOnViewport: bool,\n\n  /**\n   * motionBlur\n   * A rendering hint that specifies, for renderers which support the hint, whether a motion blur\n   * effect should be applied.\n   */\n  motionBlur: bool,\n\n  /**\n   * motionBlurOpacity\n   * A rendering hint that specifies, for renderers which support the hint, how strong the motion\n   * blur effect should be.  The value ranges from 0 to 1, with larger values indicating larger\n   * strength.\n   */\n  motionBlurOpacity: number,\n\n  /**\n   * wheelSensitivity\n   * A rendering hint that specifies, for renderers which support the hint, how fast wheel zooming\n   * should be.  The value is a positive multiplier.  Do not set this value unless you are using\n   * unconventional hardware and can guarantee that all your users will use the same hardware.  The\n   * default value works well for standard mice on common operating systems.  If you change this\n   * value, it is very likely that you will create a bad user experience for many or most of your\n   * users.\n   */\n  wheelSensitivity: number,\n\n  /**\n   * pixelRatio\n   * A rendering hint that specifies, for renderers which support the hint, the pixel ratio that\n   * should be used.  May be 'auto' or a positive number.\n   */\n  pixelRatio: oneOfType([string, object]),\n};\n", "const eitherIsNil = (a, b) => a == null || b == null;\n\nexport const hashDiff = (a, b) => {\n  return eitherIsNil(a, b) || a.hash() !== b.hash();\n};\n\nexport const shallowObjDiff = (a, b) => {\n  if (eitherIsNil(a, b) && !(a == null && b == null)) {\n    return true;\n  }\n\n  if (a === b) {\n    // can't do a diff on the same obj\n    return false;\n  }\n\n  // non-object values can be compared with the equality operator\n  if (typeof a !== 'object' || typeof b !== 'object') {\n    return a !== b;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  const mismatches = (key) => a[key] !== b[key];\n\n  if (aKeys.length !== bKeys.length) {\n    return true;\n  }\n\n  if (aKeys.some(mismatches) || bKeys.some(mismatches)) {\n    return true;\n  }\n\n  return false;\n};\n", "export const get = (obj, key) => (obj != null ? obj[key] : null);\n\nexport const toJson = (obj) => obj;\n\nexport const forEach = (arr, iterator) => arr.forEach(iterator);\n", "import { shallowObjDiff } from './diff';\nimport { get, toJson, forEach } from './json';\n\nexport const identity = (x) => x;\n\nexport const elements = [\n  { data: { id: 'a', label: 'Example node A' } },\n  { data: { id: 'b', label: 'Example node B' } },\n  { data: { id: 'e', source: 'a', target: 'b' } },\n];\n\nexport const stylesheet = [\n  {\n    selector: 'node',\n    style: {\n      label: 'data(label)',\n    },\n  },\n];\n\nexport const zoom = 1;\n\nexport const pan = {\n  x: 0,\n  y: 0,\n};\n\nexport const defaults = {\n  diff: shallowObjDiff,\n  get,\n  toJson,\n  forEach,\n  elements,\n  stylesheet,\n  zoom,\n  pan,\n};\n", "import { get as atKey } from './json';\nimport { shallowObjDiff } from './diff';\n\nconst isDiffAtKey = (json1, json2, diff, key) =>\n  diff(atKey(json1, key), atKey(json2, key));\n\nexport const patch = (cy, json1, json2, diff, toJson, get, forEach) => {\n  cy.batch(() => {\n    // The shallow object diff() must defer to patchElements() as it must compare the\n    // elements as an unordered set.  A custom diff(), with Immutable for example,\n    // could just use an equality check (===).\n    if (\n      diff === shallowObjDiff ||\n      isDiffAtKey(json1, json2, diff, 'elements')\n    ) {\n      patchElements(\n        cy,\n        atKey(json1, 'elements'),\n        atKey(json2, 'elements'),\n        toJson,\n        get,\n        forEach,\n        diff\n      );\n    }\n\n    if (isDiffAtKey(json1, json2, diff, 'stylesheet')) {\n      patchStyle(\n        cy,\n        atKey(json1, 'stylesheet'),\n        atKey(json2, 'stylesheet'),\n        toJson\n      );\n    }\n\n    [\n      // simple keys that can be patched directly (key same as fn name)\n      'zoom',\n      'minZoom',\n      'maxZoom',\n      'zoomingEnabled',\n      'userZoomingEnabled',\n      'pan',\n      'panningEnabled',\n      'userPanningEnabled',\n      'boxSelectionEnabled',\n      'autoungrabify',\n      'autolock',\n      'autounselectify',\n    ].forEach((key) => {\n      if (isDiffAtKey(json1, json2, diff, key)) {\n        patchJson(cy, key, atKey(json1, key), atKey(json2, key), toJson);\n      }\n    });\n  });\n\n  if (isDiffAtKey(json1, json2, diff, 'layout')) {\n    patchLayout(cy, atKey(json1, 'layout'), atKey(json2, 'layout'), toJson);\n  }\n};\n\nconst patchJson = (cy, key, val1, val2, toJson) => {\n  cy[key](toJson(val2));\n};\n\nconst patchLayout = (cy, layout1, layout2, toJson) => {\n  const layoutOpts = toJson(layout2);\n\n  if (layoutOpts != null) {\n    cy.layout(layoutOpts).run();\n  }\n};\n\nconst patchStyle = (cy, style1, style2, toJson) => {\n  const style = cy.style();\n\n  if (style == null) {\n    return;\n  }\n\n  style.fromJson(toJson(style2)).update();\n};\n\nconst patchElements = (cy, eles1, eles2, toJson, get, forEach, diff) => {\n  const toAdd = [];\n  const toRm = cy.collection();\n  const toPatch = [];\n  const eles1Map = {};\n  const eles2Map = {};\n  const eles1HasId = (id) => eles1Map[id] != null;\n  const eles2HasId = (id) => eles2Map[id] != null;\n  const getEle1 = (id) => eles1Map[id];\n  const getId = (ele) => get(get(ele, 'data'), 'id');\n\n  forEach(eles2, (ele2) => {\n    const id = getId(ele2);\n\n    eles2Map[id] = ele2;\n  });\n\n  if (eles1 != null) {\n    forEach(eles1, (ele1) => {\n      const id = getId(ele1);\n\n      eles1Map[id] = ele1;\n\n      if (!eles2HasId(id)) {\n        toRm.merge(cy.getElementById(id));\n      }\n    });\n  }\n\n  forEach(eles2, (ele2) => {\n    const id = getId(ele2);\n    const ele1 = getEle1(id);\n\n    if (eles1HasId(id)) {\n      toPatch.push({ ele1, ele2 });\n    } else {\n      toAdd.push(toJson(ele2));\n    }\n  });\n\n  if (toRm.length > 0) {\n    cy.remove(toRm);\n  }\n\n  if (toAdd.length > 0) {\n    cy.add(toAdd);\n  }\n\n  toPatch.forEach(({ ele1, ele2 }) =>\n    patchElement(cy, ele1, ele2, toJson, get, diff)\n  );\n};\n\nconst patchElement = (cy, ele1, ele2, toJson, get, diff) => {\n  const id = get(get(ele2, 'data'), 'id');\n  const cyEle = cy.getElementById(id);\n  const patch = {};\n  const jsonKeys = [\n    'data',\n    'position',\n    'selected',\n    'selectable',\n    'locked',\n    'grabbable',\n    'classes',\n  ];\n\n  jsonKeys.forEach((key) => {\n    const data2 = get(ele2, key);\n\n    if (diff(data2, get(ele1, key))) {\n      patch[key] = toJson(data2);\n    }\n  });\n\n  const scratch2 = get(ele2, 'scratch');\n  if (diff(scratch2, get(ele1, 'scratch'))) {\n    cyEle.scratch(toJson(scratch2));\n  }\n\n  if (Object.keys(patch).length > 0) {\n    cyEle.json(patch);\n  }\n};\n", "import React from 'react';\nimport { types } from './types';\nimport { defaults } from './defaults';\nimport Cytoscape from 'cytoscape';\nimport { patch } from './patch';\n\n/**\n * The `CytoscapeComponent` is a React component that allows for the declarative creation\n * and modification of a Cytoscape instance, a graph visualisation.\n */\nexport default class CytoscapeComponent extends React.Component {\n  static get propTypes() {\n    return types;\n  }\n\n  static get defaultProps() {\n    return defaults;\n  }\n\n  static normalizeElements(elements) {\n    const isArray = elements.length != null;\n\n    if (isArray) {\n      return elements;\n    } else {\n      let { nodes, edges } = elements;\n\n      if (nodes == null) {\n        nodes = [];\n      }\n\n      if (edges == null) {\n        edges = [];\n      }\n\n      return nodes.concat(edges);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.displayName = 'CytoscapeComponent';\n    this.containerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const container = this.containerRef.current;\n\n    const {\n      global,\n      headless,\n      styleEnabled,\n      hideEdgesOnViewport,\n      textureOnViewport,\n      motionBlur,\n      motionBlurOpacity,\n      wheelSensitivity,\n      pixelRatio,\n    } = this.props;\n\n    const cy = (this._cy = new Cytoscape({\n      container,\n      headless,\n      styleEnabled,\n      hideEdgesOnViewport,\n      textureOnViewport,\n      motionBlur,\n      motionBlurOpacity,\n      wheelSensitivity,\n      pixelRatio,\n    }));\n\n    if (global) {\n      window[global] = cy;\n    }\n\n    this.updateCytoscape(null, this.props);\n  }\n\n  updateCytoscape(prevProps, newProps) {\n    const cy = this._cy;\n    const { diff, toJson, get, forEach } = newProps;\n\n    patch(cy, prevProps, newProps, diff, toJson, get, forEach);\n\n    if (newProps.cy != null) {\n      newProps.cy(cy);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.updateCytoscape(prevProps, this.props);\n  }\n\n  componentWillUnmount() {\n    this._cy.destroy();\n  }\n\n  render() {\n    const { id, className, style } = this.props;\n\n    return React.createElement('div', {\n      ref: this.containerRef,\n      id,\n      className,\n      style,\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["string", "array", "object", "number", "bool", "oneOfType", "any", "func", "PropTypes", "types", "id", "className", "style", "elements", "stylesheet", "layout", "pan", "zoom", "panningEnabled", "userPanningEnabled", "minZoom", "maxZoom", "zoomingEnabled", "userZoomingEnabled", "boxSelectionEnabled", "autoungrabify", "autolock", "autounselectify", "get", "toJson", "diff", "forEach", "cy", "headless", "styleEnabled", "hideEdgesOnViewport", "textureOnViewport", "motionBlur", "motionBlurOpacity", "wheelSensitivity", "pixelRatio", "shallowObjDiff", "a", "b", "e", "t", "Object", "keys", "bKeys", "mismatches", "key", "aKeys", "length", "some", "obj", "defaults", "arr", "iterator", "data", "label", "source", "target", "selector", "x", "y", "isDiffAtKey", "json1", "json2", "atKey", "patch", "batch", "patchElements", "patchStyle", "patchJson", "patchLayout", "val1", "val2", "layout1", "layout2", "l", "layoutOpts", "run", "style1", "style2", "fromJson", "update", "eles1", "eles2", "i", "toRm", "collection", "eles1Map", "eles2Map", "getId", "ele", "ele2", "ele1", "merge", "getElementById", "toPatch", "push", "toAdd", "remove", "add", "patchElement", "cyEle", "data2", "scratch2", "scratch", "json", "CytoscapeComponent", "React", "Component", "defaultProps", "static", "nodes", "edges", "concat", "constructor", "props", "super", "this", "displayName", "containerRef", "createRef", "componentDidMount", "container", "current", "global", "_cy", "Cytoscape", "window", "updateCytoscape", "prevProps", "newProps", "componentDidUpdate", "componentWillUnmount", "destroy", "render", "createElement", "ref"]
}
